public class WordNet {

   /* SYNSETS and HYPERNYMS are filenames for the input files. */
   public WordNet(String synsets, String hypernyms)

   /* Returns the set of all nouns. */
   public Set<String> nouns()

   /** Returns true if WORD is a noun. WORD may be a collocation. */
   public boolean isNoun(String word)

   /** Returns the set of all hypoynms of WORD. */
   public Set<String> hyponyms(String word)

}



public class TimeSeries<T extends Number> extends TreeMap<Integer, T> {

    /** Constructs a new empty TimeSeries. */
    public TimeSeries()

    /** Creates a copy of TS, but only between STARTYEAR and ENDYEAR. */
    public TimeSeries(TimeSeries<T> ts, int startYear, int endYear)

    /** Returns the sum of this time series with the given TS. The result is a 
      * a Double time series (for simplicity). */
    public TimeSeries<Double> plus(TimeSeries<? extends Number> ts)

    /** Returns the quotient of this time series divided by the relevant value in TS.
      * If ts is missing a key in this time series, throw an IllegalArgumentException. */
    public TimeSeries<Double> dividedBy(TimeSeries<? extends Number> ts)

    /** Returns all years for this time series (in any order). */
    public Collection<Number> years()     

    /** Returns all data for this time series (in any order). */
    public Collection<Number> data()
}


public class YearlyRecord {
    /** Creates a new empty YearlyRecord. */
    public YearlyRecord()

    /** Creates a YearlyRecord containing the YEARLYDATA. */
    public YearlyRecord(HashMap<String, Integer> yearlyData)

    /** Returns the number of times WORD appeared in this year. */
    public int count(String word)

    /** Records that WORD occurred COUNT times in this year. */
    public void put(String word, int count)

    /** Returns the number of words recorded this year. */
    public int size()

    /** Returns all counts in ascending order of count. */
    public Collection<Number> counts()

    /** Returns all words in ascending order of count (not word!). */
    public Collection<String> words()           

    /** Returns the rank of WORD. Most common word is rank 1. */
    public int rank(String word)
}

public class NGramMap {

    /** Constructs an NGramMap from WORDSFILENAME and COUNTSFILENAME. */
    public NGramMap(String wordsFilename, String countsFilename)

    /** Returns the absolute count of WORD in the given YEAR. If the word
      * did not appear in the given year, return 0. */
    public int countInYear(String word, int year)

    /** Provides the history of count for WORD. */
    public TimeSeries<Integer> wordCounts(String word)

    /** Returns the YearlyRecord for YEAR. */
    public YearlyRecord getRecord(int year)

    /** Provides the history of the counts of WORD between STARTYEAR and ENDYEAR. */
    public TimeSeries<Integer> wordCounts(String word, int startYear, int endYear)        

    /** Provides the relative frequency of WORD between STARTYEAR and ENDYEAR. */
    public TimeSeries<Double> wordWeights(String word) 

    /** Do not complete the methods below until later. */

    /** Provides processed history of all words between STARTYEAR and ENDYEAR as processed
      * by YRP. */
    public TimeSeries<Double> processedHistory(int startYear, int endYear,
                                               YearlyRecordProcessor yrp)

    /** Provides processed history of all words ever as processed by YRP. */
    public TimeSeries<Double> processedHistory(YearlyRecordProcessor yrp)

    /** Provides the summed relative frequency of all WORDS between
      * STARTYEAR and ENDYEAR. */
    public TimeSeries<Double> totalWordWeights(Collection<String> words, 
                              int startYear, int endYear)
}


public class Plotter {
    /** Creates a plot of the TimeSeries TS. Labels the graph with the
      * given TITLE, XLABEL, YLABEL, and LEGEND. */
    public static void plotTS(TimeSeries<? extends Number> ts, String title, 
                              String xlabel, String ylabel, String legend) 

    /** Creates a plot of the absolute word counts for WORD from STARTYEAR
      * to ENDYEAR, using NGM as a data source. */
    public static void plotWordCounts(NGramMap ngm, String word, 
                                      int startYear, int endYear)

    /** Creates a plot of the normalized weight counts for WORD from STARTYEAR
      * to ENDYEAR, using NGM as a data source. */
    public static void plotWordWeights(NGramMap ngm, String word, 
                                       int startYear, int endYear)

    /** Creates a plot of the processed history from STARTYEAR to ENDYEAR, using
      * NGM as a data source, and the YRP as a yearly record processor. */
    public static void plotProcessedHistory(NGramMap ngm, int startYear, int endYear,
                                            YearlyRecordProcessor yrp)

    /** Creates a plot of the total normalized count of every word that is a hyponym
      * of CATEGORYLABEL from STARTYEAR to ENDYEAR using NGM and WN as data sources. */
    public static void plotCategoryWeights(NGramMap ngm, WordNet wn, String categoryLabel,
                                            int startYear, int endYear)

    /** Makes a plot showing overlaid individual normalized count for every word in WORDS
      * from STARTYEAR to ENDYEAR using NGM as a data source. */
    public static void plotAllWords(NGramMap ngm, String[] words, int startYear, int endYear)

    /** Plots the normalized count of every word against the rank of every word on a
      * log-log plot. Uses data from YEAR, using NGM as a data source. */
    public static void plotZipfsLaw(NGramMap ngm, int year)
}